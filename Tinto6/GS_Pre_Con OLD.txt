int nth, istart, iend, tid, jj;
#pragma omp parallel private(nth, istart, iend, tid, jj)
{
    nth = omp_get_num_threads();
    tid = omp_get_thread_num();

    istart = (xSize - 2) / nth * tid + 1;
    iend = istart + (xSize - 2) / nth - 1;

    for (int j = 1; j < ySize - 1 + nth - 1; ++j)
    {
        jj = j - tid;
        if (jj >= 1 && jj < ySize - 1)
        {
            for (int i = istart; i <= iend; ++i)
            {
                (*x)(j, i) = w_c * ((*rhs)(j, i) + (w_y * (*x)(j - 1, i) + w_x * (*x)(j, i - 1)));
            }
        }
        #pragma omp barrier
    }

    for (int j = ySize - 2 + nth - 1; j > 0; --j)
    {
        jj = j - tid;
        if (jj >= 1 && jj < ySize - 1)
        {
            for (int i = iend; i >= istart; --i)
            {
                (*x)(j, i) = (*x)(j, i) + w_c * (w_y * (*x)(j + 1, i) + w_x * (*x)(j, i + 1));
            }
        }
        #pragma omp barrier
    }
}
